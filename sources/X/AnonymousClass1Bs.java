package X;

import org.spongycastle.jcajce.provider.digest.MD5;
import org.spongycastle.jcajce.provider.digest.SHA1;
import org.spongycastle.jcajce.provider.digest.SHA256;
import org.spongycastle.jcajce.provider.digest.SHA384;
import org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2;

/* renamed from: X.1Bs  reason: invalid class name */
public abstract class AnonymousClass1Bs {
    public void A02(AnonymousClass1Bk r6) {
        StringBuilder sb;
        String obj;
        String str;
        if (this instanceof PBEPBKDF2.Mappings) {
            StringBuilder sb2 = new StringBuilder();
            String str2 = PBEPBKDF2.Mappings.A00;
            sb2.append(str2);
            sb2.append("$AlgParams");
            r6.BAv("AlgorithmParameters.PBKDF2", sb2.toString());
            StringBuilder sb3 = new StringBuilder();
            sb3.append("Alg.Alias.AlgorithmParameters.");
            AnonymousClass1C0 r4 = AnonymousClass1Bw.A0G;
            sb3.append(r4);
            r6.BAv(sb3.toString(), "PBKDF2");
            StringBuilder sb4 = new StringBuilder();
            sb4.append(str2);
            sb4.append("$PBKDF2withUTF8");
            r6.BAv("SecretKeyFactory.PBKDF2", sb4.toString());
            r6.BAv("Alg.Alias.SecretKeyFactory.PBKDF2WITHHMACSHA1", "PBKDF2");
            r6.BAv("Alg.Alias.SecretKeyFactory.PBKDF2WITHHMACSHA1ANDUTF8", "PBKDF2");
            StringBuilder sb5 = new StringBuilder();
            sb5.append("Alg.Alias.SecretKeyFactory.");
            sb5.append(r4);
            r6.BAv(sb5.toString(), "PBKDF2");
            StringBuilder sb6 = new StringBuilder();
            sb6.append(str2);
            sb6.append("$PBKDF2with8BIT");
            r6.BAv("SecretKeyFactory.PBKDF2WITHASCII", sb6.toString());
            r6.BAv("Alg.Alias.SecretKeyFactory.PBKDF2WITH8BIT", "PBKDF2WITHASCII");
            r6.BAv("Alg.Alias.SecretKeyFactory.PBKDF2WITHHMACSHA1AND8BIT", "PBKDF2WITHASCII");
            StringBuilder sb7 = new StringBuilder();
            sb7.append(str2);
            sb7.append("$PBKDF2withSHA224");
            r6.BAv("SecretKeyFactory.PBKDF2WITHHMACSHA224", sb7.toString());
            StringBuilder sb8 = new StringBuilder();
            sb8.append(str2);
            sb8.append("$PBKDF2withSHA256");
            r6.BAv("SecretKeyFactory.PBKDF2WITHHMACSHA256", sb8.toString());
            StringBuilder sb9 = new StringBuilder();
            sb9.append(str2);
            sb9.append("$PBKDF2withSHA384");
            r6.BAv("SecretKeyFactory.PBKDF2WITHHMACSHA384", sb9.toString());
            StringBuilder sb10 = new StringBuilder();
            sb10.append(str2);
            sb10.append("$PBKDF2withSHA512");
            r6.BAv("SecretKeyFactory.PBKDF2WITHHMACSHA512", sb10.toString());
            StringBuilder sb11 = new StringBuilder();
            sb11.append(str2);
            sb11.append("$PBKDF2withSHA3_224");
            r6.BAv("SecretKeyFactory.PBKDF2WITHHMACSHA3-224", sb11.toString());
            StringBuilder sb12 = new StringBuilder();
            sb12.append(str2);
            sb12.append("$PBKDF2withSHA3_256");
            r6.BAv("SecretKeyFactory.PBKDF2WITHHMACSHA3-256", sb12.toString());
            StringBuilder sb13 = new StringBuilder();
            sb13.append(str2);
            sb13.append("$PBKDF2withSHA3_384");
            r6.BAv("SecretKeyFactory.PBKDF2WITHHMACSHA3-384", sb13.toString());
            StringBuilder sb14 = new StringBuilder();
            sb14.append(str2);
            sb14.append("$PBKDF2withSHA3_512");
            r6.BAv("SecretKeyFactory.PBKDF2WITHHMACSHA3-512", sb14.toString());
            StringBuilder sb15 = new StringBuilder();
            sb15.append(str2);
            sb15.append("$PBKDF2withGOST3411");
            r6.BAv("SecretKeyFactory.PBKDF2WITHHMACGOST3411", sb15.toString());
            StringBuilder sb16 = new StringBuilder();
            sb16.append(str2);
            sb16.append("$PBKDF2withSM3");
            obj = sb16.toString();
            str = "SecretKeyFactory.PBKDF2WITHHMACSM3";
        } else if (this instanceof SHA384.Mappings) {
            StringBuilder sb17 = new StringBuilder();
            String str3 = SHA384.Mappings.A00;
            sb17.append(str3);
            sb17.append("$Digest");
            r6.BAv("MessageDigest.SHA-384", sb17.toString());
            r6.BAv("Alg.Alias.MessageDigest.SHA384", "SHA-384");
            StringBuilder sb18 = new StringBuilder();
            sb18.append("Alg.Alias.MessageDigest.");
            sb18.append(AnonymousClass1C9.A0p);
            r6.BAv(sb18.toString(), "SHA-384");
            StringBuilder sb19 = new StringBuilder();
            sb19.append(str3);
            sb19.append("$OldSHA384");
            r6.BAv("Mac.OLDHMACSHA384", sb19.toString());
            StringBuilder sb20 = new StringBuilder();
            sb20.append(str3);
            sb20.append("$HashMac");
            r6.BAv("Mac.PBEWITHHMACSHA384", sb20.toString());
            StringBuilder sb21 = new StringBuilder();
            sb21.append(str3);
            sb21.append("$HashMac");
            String obj2 = sb21.toString();
            StringBuilder sb22 = new StringBuilder();
            sb22.append(str3);
            sb22.append("$KeyGenerator");
            AnonymousClass1Bt.A00("SHA384", obj2, sb22.toString(), r6);
            AnonymousClass1Bt.A01("SHA384", AnonymousClass1Bw.A1H, r6);
            return;
        } else if (this instanceof SHA256.Mappings) {
            StringBuilder sb23 = new StringBuilder();
            String str4 = SHA256.Mappings.A00;
            sb23.append(str4);
            sb23.append("$Digest");
            r6.BAv("MessageDigest.SHA-256", sb23.toString());
            r6.BAv("Alg.Alias.MessageDigest.SHA256", "SHA-256");
            StringBuilder sb24 = new StringBuilder();
            sb24.append("Alg.Alias.MessageDigest.");
            AnonymousClass1C0 r3 = AnonymousClass1C9.A0o;
            sb24.append(r3);
            r6.BAv(sb24.toString(), "SHA-256");
            StringBuilder sb25 = new StringBuilder();
            sb25.append(str4);
            sb25.append("$PBEWithMacKeyFactory");
            r6.BAv("SecretKeyFactory.PBEWITHHMACSHA256", sb25.toString());
            r6.BAv("Alg.Alias.SecretKeyFactory.PBEWITHHMACSHA-256", "PBEWITHHMACSHA256");
            StringBuilder sb26 = new StringBuilder();
            sb26.append("Alg.Alias.SecretKeyFactory.");
            sb26.append(r3);
            r6.BAv(sb26.toString(), "PBEWITHHMACSHA256");
            StringBuilder sb27 = new StringBuilder();
            sb27.append(str4);
            sb27.append("$HashMac");
            r6.BAv("Mac.PBEWITHHMACSHA256", sb27.toString());
            StringBuilder sb28 = new StringBuilder();
            sb28.append(str4);
            sb28.append("$HashMac");
            String obj3 = sb28.toString();
            StringBuilder sb29 = new StringBuilder();
            sb29.append(str4);
            sb29.append("$KeyGenerator");
            AnonymousClass1Bt.A00("SHA256", obj3, sb29.toString(), r6);
            AnonymousClass1Bt.A01("SHA256", AnonymousClass1Bw.A1G, r6);
            AnonymousClass1Bt.A01("SHA256", r3, r6);
            return;
        } else if (this instanceof SHA1.Mappings) {
            String str5 = SHA1.Mappings.A00;
            sb.append(str5);
            sb.append("$Digest");
            r6.BAv("MessageDigest.SHA-1", sb.toString());
            r6.BAv("Alg.Alias.MessageDigest.SHA1", "SHA-1");
            r6.BAv("Alg.Alias.MessageDigest.SHA", "SHA-1");
            StringBuilder sb30 = new StringBuilder();
            sb30.append("Alg.Alias.MessageDigest.");
            AnonymousClass1C0 r42 = AnonymousClass1C6.A07;
            sb30.append(r42);
            r6.BAv(sb30.toString(), "SHA-1");
            StringBuilder sb31 = new StringBuilder();
            sb31.append(str5);
            sb31.append("$HashMac");
            String obj4 = sb31.toString();
            StringBuilder sb32 = new StringBuilder();
            sb32.append(str5);
            sb32.append("$KeyGenerator");
            AnonymousClass1Bt.A00("SHA1", obj4, sb32.toString(), r6);
            AnonymousClass1Bt.A01("SHA1", AnonymousClass1Bw.A1E, r6);
            AnonymousClass1Bt.A01("SHA1", AnonymousClass1C3.A06, r6);
            StringBuilder sb33 = new StringBuilder();
            sb33.append(str5);
            sb33.append("$SHA1Mac");
            r6.BAv("Mac.PBEWITHHMACSHA", sb33.toString());
            StringBuilder sb34 = new StringBuilder();
            sb34.append(str5);
            sb34.append("$SHA1Mac");
            r6.BAv("Mac.PBEWITHHMACSHA1", sb34.toString());
            r6.BAv("Alg.Alias.SecretKeyFactory.PBEWITHHMACSHA", "PBEWITHHMACSHA1");
            StringBuilder sb35 = new StringBuilder();
            sb35.append("Alg.Alias.SecretKeyFactory.");
            sb35.append(r42);
            r6.BAv(sb35.toString(), "PBEWITHHMACSHA1");
            StringBuilder sb36 = new StringBuilder();
            sb36.append("Alg.Alias.Mac.");
            sb36.append(r42);
            r6.BAv(sb36.toString(), "PBEWITHHMACSHA");
            StringBuilder sb37 = new StringBuilder();
            sb37.append(str5);
            sb37.append("$PBEWithMacKeyFactory");
            obj = sb37.toString();
            str = "SecretKeyFactory.PBEWITHHMACSHA1";
        } else {
            sb = new StringBuilder();
            String str6 = MD5.Mappings.A00;
            sb.append(str6);
            sb.append("$Digest");
            r6.BAv("MessageDigest.MD5", sb.toString());
            StringBuilder sb38 = new StringBuilder();
            sb38.append("Alg.Alias.MessageDigest.");
            sb38.append(AnonymousClass1Bw.A1U);
            r6.BAv(sb38.toString(), "MD5");
            StringBuilder sb39 = new StringBuilder();
            sb39.append(str6);
            sb39.append("$HashMac");
            String obj5 = sb39.toString();
            StringBuilder sb40 = new StringBuilder();
            sb40.append(str6);
            sb40.append("$KeyGenerator");
            AnonymousClass1Bt.A00("MD5", obj5, sb40.toString(), r6);
            AnonymousClass1Bt.A01("MD5", AnonymousClass1C3.A04, r6);
            return;
        }
        r6.BAv(str, obj);
    }
}
