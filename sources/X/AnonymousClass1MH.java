package X;

import android.content.ContentValues;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import com.whatsapp.util.Log;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;

/* renamed from: X.1MH  reason: invalid class name */
public final class AnonymousClass1MH extends C24801Ls {
    public AnonymousClass1PE A00;
    public final AnonymousClass11P A01;
    public final AnonymousClass1CO A02;
    public final AnonymousClass00H A03;
    public final boolean A04 = true;

    /* JADX WARNING: type inference failed for: r5v0, types: [X.1Cb, java.lang.Object] */
    /* JADX INFO: super call moved to the top of the method (can break code semantics) */
    public AnonymousClass1MH(AnonymousClass190 r9, AnonymousClass11P r10, AnonymousClass118 r11, AnonymousClass1CO r12, AnonymousClass00H r13) {
        super(r11.A00, r9, new Object(), "axolotl.db", 23);
        C18070vi.A0d(r11, 1);
        C18070vi.A0d(r10, 2);
        C18070vi.A0d(r9, 3);
        C18070vi.A0d(r12, 4);
        C18070vi.A0d(r13, 5);
        this.A01 = r10;
        this.A02 = r12;
        this.A03 = r13;
    }

    public void onCreate(SQLiteDatabase sQLiteDatabase) {
        AnonymousClass1PE r0;
        SQLiteDatabase sQLiteDatabase2 = sQLiteDatabase;
        C18070vi.A0d(sQLiteDatabase2, 0);
        Log.i("AxolotlDbHelper/onCreate version 23");
        sQLiteDatabase2.execSQL("CREATE TABLE identities (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, recipient_type INTEGER NOT NULL DEFAULT 0, device_id INTEGER, registration_id INTEGER, public_key BLOB, private_key BLOB, next_prekey_id INTEGER, timestamp INTEGER )");
        sQLiteDatabase2.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, recipient_type, device_id)");
        sQLiteDatabase2.execSQL("CREATE TABLE prekeys (_id INTEGER PRIMARY KEY AUTOINCREMENT, prekey_id INTEGER UNIQUE, sent_to_server BOOLEAN, record BLOB, direct_distribution BOOLEAN, upload_timestamp INTEGER, key_type INTEGER NOT NULL DEFAULT 0)");
        sQLiteDatabase2.execSQL("CREATE TABLE prekey_uploads (_id INTEGER PRIMARY KEY AUTOINCREMENT, upload_timestamp INTEGER, key_type INTEGER NOT NULL DEFAULT 0)");
        sQLiteDatabase2.execSQL("CREATE TABLE sessions (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, recipient_type INTEGER NOT NULL DEFAULT 0, device_id INTEGER, record BLOB, timestamp INTEGER, recipient_account_id TEXT, recipient_account_type INTEGER, session_type INTEGER NOT NULL DEFAULT 0)");
        sQLiteDatabase2.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v22 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type, session_type )");
        sQLiteDatabase2.execSQL("CREATE INDEX IF NOT EXISTS sessions_account_idx ON sessions (recipient_account_id, recipient_account_type, device_id )");
        sQLiteDatabase2.execSQL("CREATE TABLE signed_prekeys (_id INTEGER PRIMARY KEY AUTOINCREMENT, prekey_id INTEGER UNIQUE, timestamp INTEGER, record  BLOB, key_type INTEGER NOT NULL DEFAULT 0)");
        sQLiteDatabase2.execSQL("CREATE TABLE message_base_key (_id INTEGER PRIMARY KEY AUTOINCREMENT, msg_key_remote_jid TEXT NOT NULL, msg_key_from_me BOOLEAN NOT NULL, msg_key_id TEXT NOT NULL, recipient_id INTEGER, recipient_type INTEGER NOT NULL DEFAULT 0, device_id INTEGER NOT NULL DEFAULT 0, last_alice_base_key BLOB NOT NULL, timestamp INTEGER )");
        sQLiteDatabase2.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, recipient_type, device_id)");
        sQLiteDatabase2.execSQL("CREATE TABLE sender_keys (_id INTEGER PRIMARY KEY AUTOINCREMENT, group_id TEXT NOT NULL, sender_id INTEGER NOT NULL, sender_type INTEGER NOT NULL DEFAULT 0, device_id INTEGER NOT NULL DEFAULT 0, record BLOB NOT NULL, timestamp INTEGER, sender_account_id TEXT, sender_account_type INTEGER )");
        sQLiteDatabase2.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx_v23 ON sender_keys (group_id, sender_id, sender_type, device_id, sender_account_id, sender_account_type)");
        sQLiteDatabase2.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_account_idx ON sender_keys (group_id, sender_account_id, sender_account_type, device_id)");
        sQLiteDatabase2.execSQL("CREATE TABLE fast_ratchet_sender_keys (_id INTEGER PRIMARY KEY AUTOINCREMENT, group_id TEXT NOT NULL, sender_id  INTEGER NOT NULL, sender_type INTEGER NOT NULL DEFAULT 0, device_id INTEGER NOT NULL DEFAULT 0, record BLOB NOT NULL )");
        sQLiteDatabase2.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, sender_type, device_id)");
        sQLiteDatabase2.execSQL("CREATE TABLE IF NOT EXISTS decryption_journal (msg_key_id TEXT NOT NULL, sender_id TEXT NOT NULL, device_id TEXT NOT NULL, plain_text BLOB NOT NULL, receive_timestamp INTEGER NOT NULL)");
        sQLiteDatabase2.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS decryption_journal_idx ON decryption_journal (msg_key_id, sender_id, device_id)");
        sQLiteDatabase2.execSQL("CREATE TABLE IF NOT EXISTS\n            preacks (\n              _id INTEGER PRIMARY KEY AUTOINCREMENT,\n              ptn BLOB NOT NULL\n            )\n        ");
        Log.i("AxolotlDbHelper/onCreate done");
        if (this.A04 && (r0 = this.A00) != null) {
            AnonymousClass1P3 r3 = r0.A00;
            long A012 = AnonymousClass11P.A01(r3.A0B) / 1000;
            C53262cF A002 = C63962tz.A00();
            C53272cG r1 = new C53272cG(A002.A00, new C58252kO(A002.A01));
            AnonymousClass1P0 r12 = r3.A06;
            byte[] A003 = r1.A01.A00.A00();
            C18070vi.A0X(A003);
            C58242kN r2 = r1.A00;
            byte[] bArr = r2.A00;
            C18070vi.A0X(bArr);
            try {
                int nextInt = SecureRandom.getInstance("SHA1PRNG").nextInt(2147483646) + 1;
                ContentValues contentValues = new ContentValues();
                contentValues.put("recipient_id", -1);
                contentValues.put("recipient_type", 0);
                contentValues.put("device_id", 0);
                contentValues.put("registration_id", Integer.valueOf(nextInt));
                contentValues.put("public_key", A003);
                contentValues.put("private_key", bArr);
                try {
                    contentValues.put("next_prekey_id", Integer.valueOf(SecureRandom.getInstance("SHA1PRNG").nextInt(16777214) + 1));
                    Long valueOf = Long.valueOf(A012);
                    contentValues.put("timestamp", valueOf);
                    sQLiteDatabase2.insertOrThrow("identities", (String) null, contentValues);
                    Log.i("SignalIdentityKeyStore/inserted identity key pair");
                    r12.A01 = new C52962bl(A003, bArr);
                    r12.A00 = nextInt;
                    AnonymousClass1PJ r9 = r3.A01;
                    try {
                        C53262cF A004 = C63962tz.A00();
                        C33801jP r13 = A004.A01;
                        byte[] A09 = C63962tz.A09(r2, r13.A00());
                        C45672Az r22 = (C45672Az) AnonymousClass2BQ.DEFAULT_INSTANCE.A0N();
                        r22.A0G(0);
                        byte[] A005 = r13.A00();
                        r22.A0J(DSQ.A01(A005, 0, A005.length));
                        byte[] bArr2 = A004.A00.A00;
                        r22.A0I(DSQ.A01(bArr2, 0, bArr2.length));
                        r22.A0K(DSQ.A01(A09, 0, A09.length));
                        r22.A0H(AnonymousClass11P.A01(r9.A01));
                        byte[] A0M = r22.A0C().A0M();
                        ContentValues contentValues2 = new ContentValues();
                        contentValues2.put("prekey_id", 0);
                        contentValues2.put("timestamp", valueOf);
                        contentValues2.put("record", A0M);
                        sQLiteDatabase2.insertOrThrow("signed_prekeys", (String) null, contentValues2);
                        Log.i("SignalIdentityKeyStore/inserted signed prekey");
                        r3.A0G.A00(new C70573Bq(r3, 18));
                        r3.A0D.A2D(true);
                        ((AnonymousClass10T) r3.A0R.get()).notifyAllObservers(new C96994ok(12));
                    } catch (C22511Ak e) {
                        throw new RuntimeException(e);
                    }
                } catch (NoSuchAlgorithmException e2) {
                    throw new AssertionError(e2);
                }
            } catch (NoSuchAlgorithmException e3) {
                throw new AssertionError(e3);
            }
        }
    }

    public void onUpgrade(SQLiteDatabase sQLiteDatabase, int i, int i2) {
        C18070vi.A0d(sQLiteDatabase, 0);
        StringBuilder sb = new StringBuilder();
        sb.append("AxolotlDbHelper/onUpgrade db from ");
        sb.append(i);
        sb.append(" to ");
        sb.append(i2);
        Log.i(sb.toString());
        if (i2 == 23) {
            long A012 = AnonymousClass11P.A01(this.A01) / 1000;
            if (i <= 1) {
                sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN timestamp INTEGER");
                ContentValues contentValues = new ContentValues();
                contentValues.put("timestamp", Long.valueOf(A012));
                sQLiteDatabase.update("sessions", contentValues, (String) null, (String[]) null);
            } else if (i > 2) {
                if (i > 4) {
                    if (i > 5) {
                        if (i > 6) {
                            if (i > 7) {
                                if (i > 8) {
                                    if (i > 9) {
                                        if (i > 10) {
                                            if (i > 11) {
                                                if (i > 12) {
                                                    if (i > 13) {
                                                        if (i > 17) {
                                                            if (i > 18) {
                                                                if (i > 19) {
                                                                    if (i > 20) {
                                                                        if (i > 21) {
                                                                            if (i > 22) {
                                                                                return;
                                                                            }
                                                                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx_v23 ON sender_keys (group_id, sender_id, sender_type, device_id, sender_account_id, sender_account_type)");
                                                                            A01(sQLiteDatabase, "sender_keys_idx");
                                                                            return;
                                                                        }
                                                                        sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN session_type INTEGER NOT NULL DEFAULT 0");
                                                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v22 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type, session_type )");
                                                                        A01(sQLiteDatabase, "sessions_idx_v2");
                                                                        sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                                                        sQLiteDatabase.execSQL("ALTER TABLE signed_prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                                                        sQLiteDatabase.execSQL("ALTER TABLE prekey_uploads ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx_v23 ON sender_keys (group_id, sender_id, sender_type, device_id, sender_account_id, sender_account_type)");
                                                                        A01(sQLiteDatabase, "sender_keys_idx");
                                                                        return;
                                                                    }
                                                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v2 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type )");
                                                                    A01(sQLiteDatabase, "sessions_idx");
                                                                    sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN session_type INTEGER NOT NULL DEFAULT 0");
                                                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v22 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type, session_type )");
                                                                    A01(sQLiteDatabase, "sessions_idx_v2");
                                                                    sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                                                    sQLiteDatabase.execSQL("ALTER TABLE signed_prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                                                    sQLiteDatabase.execSQL("ALTER TABLE prekey_uploads ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx_v23 ON sender_keys (group_id, sender_id, sender_type, device_id, sender_account_id, sender_account_type)");
                                                                    A01(sQLiteDatabase, "sender_keys_idx");
                                                                    return;
                                                                }
                                                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_protocol_idx");
                                                                sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_id TEXT");
                                                                sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_type INTEGER");
                                                                sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sessions_account_idx ON sessions (recipient_account_id, recipient_account_type, device_id )");
                                                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_protocol_idx");
                                                                sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_id TEXT");
                                                                sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_type INTEGER");
                                                                sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_account_idx ON sender_keys (group_id, sender_account_id, sender_account_type, device_id)");
                                                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v2 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type )");
                                                                A01(sQLiteDatabase, "sessions_idx");
                                                                sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN session_type INTEGER NOT NULL DEFAULT 0");
                                                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v22 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type, session_type )");
                                                                A01(sQLiteDatabase, "sessions_idx_v2");
                                                                sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                                                sQLiteDatabase.execSQL("ALTER TABLE signed_prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                                                sQLiteDatabase.execSQL("ALTER TABLE prekey_uploads ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx_v23 ON sender_keys (group_id, sender_id, sender_type, device_id, sender_account_id, sender_account_type)");
                                                                A01(sQLiteDatabase, "sender_keys_idx");
                                                                return;
                                                            }
                                                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_lid_identifier_idx");
                                                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_lid_identifier_idx");
                                                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_protocol_idx");
                                                            sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_id TEXT");
                                                            sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_type INTEGER");
                                                            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sessions_account_idx ON sessions (recipient_account_id, recipient_account_type, device_id )");
                                                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_protocol_idx");
                                                            sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_id TEXT");
                                                            sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_type INTEGER");
                                                            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_account_idx ON sender_keys (group_id, sender_account_id, sender_account_type, device_id)");
                                                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v2 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type )");
                                                            A01(sQLiteDatabase, "sessions_idx");
                                                            sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN session_type INTEGER NOT NULL DEFAULT 0");
                                                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v22 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type, session_type )");
                                                            A01(sQLiteDatabase, "sessions_idx_v2");
                                                            sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                                            sQLiteDatabase.execSQL("ALTER TABLE signed_prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                                            sQLiteDatabase.execSQL("ALTER TABLE prekey_uploads ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx_v23 ON sender_keys (group_id, sender_id, sender_type, device_id, sender_account_id, sender_account_type)");
                                                            A01(sQLiteDatabase, "sender_keys_idx");
                                                            return;
                                                        }
                                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_lid_identifier_idx");
                                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_lid_identifier_idx");
                                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_lid_identifier_idx");
                                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_lid_identifier_idx");
                                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_lid_identifier_idx");
                                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_protocol_idx");
                                                        sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_id TEXT");
                                                        sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_type INTEGER");
                                                        sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sessions_account_idx ON sessions (recipient_account_id, recipient_account_type, device_id )");
                                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_protocol_idx");
                                                        sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_id TEXT");
                                                        sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_type INTEGER");
                                                        sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_account_idx ON sender_keys (group_id, sender_account_id, sender_account_type, device_id)");
                                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v2 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type )");
                                                        A01(sQLiteDatabase, "sessions_idx");
                                                        sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN session_type INTEGER NOT NULL DEFAULT 0");
                                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v22 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type, session_type )");
                                                        A01(sQLiteDatabase, "sessions_idx_v2");
                                                        sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                                        sQLiteDatabase.execSQL("ALTER TABLE signed_prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                                        sQLiteDatabase.execSQL("ALTER TABLE prekey_uploads ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx_v23 ON sender_keys (group_id, sender_id, sender_type, device_id, sender_account_id, sender_account_type)");
                                                        A01(sQLiteDatabase, "sender_keys_idx");
                                                        return;
                                                    }
                                                    sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS\n            preacks (\n              _id INTEGER PRIMARY KEY AUTOINCREMENT,\n              ptn BLOB NOT NULL\n            )\n        ");
                                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_lid_identifier_idx");
                                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_lid_identifier_idx");
                                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_lid_identifier_idx");
                                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_lid_identifier_idx");
                                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_lid_identifier_idx");
                                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_protocol_idx");
                                                    sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_id TEXT");
                                                    sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_type INTEGER");
                                                    sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sessions_account_idx ON sessions (recipient_account_id, recipient_account_type, device_id )");
                                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_protocol_idx");
                                                    sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_id TEXT");
                                                    sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_type INTEGER");
                                                    sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_account_idx ON sender_keys (group_id, sender_account_id, sender_account_type, device_id)");
                                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v2 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type )");
                                                    A01(sQLiteDatabase, "sessions_idx");
                                                    sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN session_type INTEGER NOT NULL DEFAULT 0");
                                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v22 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type, session_type )");
                                                    A01(sQLiteDatabase, "sessions_idx_v2");
                                                    sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                                    sQLiteDatabase.execSQL("ALTER TABLE signed_prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                                    sQLiteDatabase.execSQL("ALTER TABLE prekey_uploads ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx_v23 ON sender_keys (group_id, sender_id, sender_type, device_id, sender_account_id, sender_account_type)");
                                                    A01(sQLiteDatabase, "sender_keys_idx");
                                                    return;
                                                }
                                                sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS decryption_journal (msg_key_id TEXT NOT NULL, sender_id TEXT NOT NULL, device_id TEXT NOT NULL, plain_text BLOB NOT NULL, receive_timestamp INTEGER NOT NULL)");
                                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS decryption_journal_idx ON decryption_journal (msg_key_id, sender_id, device_id)");
                                                sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS\n            preacks (\n              _id INTEGER PRIMARY KEY AUTOINCREMENT,\n              ptn BLOB NOT NULL\n            )\n        ");
                                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_lid_identifier_idx");
                                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_lid_identifier_idx");
                                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_lid_identifier_idx");
                                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_lid_identifier_idx");
                                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_lid_identifier_idx");
                                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_protocol_idx");
                                                sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_id TEXT");
                                                sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_type INTEGER");
                                                sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sessions_account_idx ON sessions (recipient_account_id, recipient_account_type, device_id )");
                                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_protocol_idx");
                                                sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_id TEXT");
                                                sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_type INTEGER");
                                                sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_account_idx ON sender_keys (group_id, sender_account_id, sender_account_type, device_id)");
                                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v2 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type )");
                                                A01(sQLiteDatabase, "sessions_idx");
                                                sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN session_type INTEGER NOT NULL DEFAULT 0");
                                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v22 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type, session_type )");
                                                A01(sQLiteDatabase, "sessions_idx_v2");
                                                sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                                sQLiteDatabase.execSQL("ALTER TABLE signed_prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                                sQLiteDatabase.execSQL("ALTER TABLE prekey_uploads ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx_v23 ON sender_keys (group_id, sender_id, sender_type, device_id, sender_account_id, sender_account_type)");
                                                A01(sQLiteDatabase, "sender_keys_idx");
                                                return;
                                            }
                                            sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_idx");
                                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, recipient_type, device_id)");
                                            sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_idx");
                                            sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, recipient_type, device_id)");
                                            sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                                            sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, sender_type, device_id)");
                                            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS decryption_journal (msg_key_id TEXT NOT NULL, sender_id TEXT NOT NULL, device_id TEXT NOT NULL, plain_text BLOB NOT NULL, receive_timestamp INTEGER NOT NULL)");
                                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS decryption_journal_idx ON decryption_journal (msg_key_id, sender_id, device_id)");
                                            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS\n            preacks (\n              _id INTEGER PRIMARY KEY AUTOINCREMENT,\n              ptn BLOB NOT NULL\n            )\n        ");
                                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_lid_identifier_idx");
                                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_lid_identifier_idx");
                                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_lid_identifier_idx");
                                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_lid_identifier_idx");
                                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_lid_identifier_idx");
                                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_protocol_idx");
                                            sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_id TEXT");
                                            sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_type INTEGER");
                                            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sessions_account_idx ON sessions (recipient_account_id, recipient_account_type, device_id )");
                                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_protocol_idx");
                                            sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_id TEXT");
                                            sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_type INTEGER");
                                            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_account_idx ON sender_keys (group_id, sender_account_id, sender_account_type, device_id)");
                                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v2 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type )");
                                            A01(sQLiteDatabase, "sessions_idx");
                                            sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN session_type INTEGER NOT NULL DEFAULT 0");
                                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v22 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type, session_type )");
                                            A01(sQLiteDatabase, "sessions_idx_v2");
                                            sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                            sQLiteDatabase.execSQL("ALTER TABLE signed_prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                            sQLiteDatabase.execSQL("ALTER TABLE prekey_uploads ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx_v23 ON sender_keys (group_id, sender_id, sender_type, device_id, sender_account_id, sender_account_type)");
                                            A01(sQLiteDatabase, "sender_keys_idx");
                                            return;
                                        }
                                        A03(sQLiteDatabase, "identities", "CREATE TABLE identities (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, registration_id INTEGER, public_key BLOB, private_key BLOB, next_prekey_id INTEGER, timestamp INTEGER)", new String[]{"recipient_id", "registration_id", "public_key", "private_key", "next_prekey_id", "timestamp"});
                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, device_id)");
                                        A02(sQLiteDatabase, "identities");
                                        A03(sQLiteDatabase, "sessions", "CREATE TABLE sessions (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, record BLOB, timestamp INTEGER)", new String[]{"recipient_id", "record", "timestamp"});
                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx ON sessions (recipient_id, device_id)");
                                        sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                                        A02(sQLiteDatabase, "sessions");
                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id, device_id)");
                                        sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, device_id)");
                                        sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_id INTEGER ");
                                        sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                                        sQLiteDatabase.execSQL("DELETE FROM message_base_key WHERE msg_key_remote_jid NOT GLOB '[0-9]*@s.whatsapp.net'");
                                        sQLiteDatabase.execSQL("UPDATE message_base_key SET recipient_id = CAST(REPLACE(msg_key_remote_jid, '@s.whatsapp.net', '') AS INTEGER)");
                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, device_id)");
                                        sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_idx");
                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, recipient_type, device_id)");
                                        sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_idx");
                                        sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, recipient_type, device_id)");
                                        sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                                        sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, sender_type, device_id)");
                                        sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS decryption_journal (msg_key_id TEXT NOT NULL, sender_id TEXT NOT NULL, device_id TEXT NOT NULL, plain_text BLOB NOT NULL, receive_timestamp INTEGER NOT NULL)");
                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS decryption_journal_idx ON decryption_journal (msg_key_id, sender_id, device_id)");
                                        sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS\n            preacks (\n              _id INTEGER PRIMARY KEY AUTOINCREMENT,\n              ptn BLOB NOT NULL\n            )\n        ");
                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_lid_identifier_idx");
                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_lid_identifier_idx");
                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_lid_identifier_idx");
                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_lid_identifier_idx");
                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_lid_identifier_idx");
                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_protocol_idx");
                                        sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_id TEXT");
                                        sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_type INTEGER");
                                        sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sessions_account_idx ON sessions (recipient_account_id, recipient_account_type, device_id )");
                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_protocol_idx");
                                        sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_id TEXT");
                                        sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_type INTEGER");
                                        sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_account_idx ON sender_keys (group_id, sender_account_id, sender_account_type, device_id)");
                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v2 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type )");
                                        A01(sQLiteDatabase, "sessions_idx");
                                        sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN session_type INTEGER NOT NULL DEFAULT 0");
                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v22 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type, session_type )");
                                        A01(sQLiteDatabase, "sessions_idx_v2");
                                        sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                        sQLiteDatabase.execSQL("ALTER TABLE signed_prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                        sQLiteDatabase.execSQL("ALTER TABLE prekey_uploads ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx_v23 ON sender_keys (group_id, sender_id, sender_type, device_id, sender_account_id, sender_account_type)");
                                        A01(sQLiteDatabase, "sender_keys_idx");
                                        return;
                                    }
                                    sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN upload_timestamp INTEGER");
                                    ContentValues contentValues2 = new ContentValues();
                                    Long valueOf = Long.valueOf(A012);
                                    contentValues2.put("upload_timestamp", valueOf);
                                    sQLiteDatabase.update("prekeys", contentValues2, "sent_to_server != 0", (String[]) null);
                                    sQLiteDatabase.execSQL("CREATE TABLE prekey_uploads (_id INTEGER PRIMARY KEY AUTOINCREMENT, upload_timestamp INTEGER, key_type INTEGER NOT NULL DEFAULT 0)");
                                    ContentValues contentValues3 = new ContentValues();
                                    contentValues3.put("upload_timestamp", valueOf);
                                    sQLiteDatabase.insert("prekey_uploads", (String) null, contentValues3);
                                    A03(sQLiteDatabase, "identities", "CREATE TABLE identities (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, registration_id INTEGER, public_key BLOB, private_key BLOB, next_prekey_id INTEGER, timestamp INTEGER)", new String[]{"recipient_id", "registration_id", "public_key", "private_key", "next_prekey_id", "timestamp"});
                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, device_id)");
                                    A02(sQLiteDatabase, "identities");
                                    A03(sQLiteDatabase, "sessions", "CREATE TABLE sessions (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, record BLOB, timestamp INTEGER)", new String[]{"recipient_id", "record", "timestamp"});
                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx ON sessions (recipient_id, device_id)");
                                    sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                                    A02(sQLiteDatabase, "sessions");
                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id, device_id)");
                                    sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, device_id)");
                                    sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_id INTEGER ");
                                    sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                                    sQLiteDatabase.execSQL("DELETE FROM message_base_key WHERE msg_key_remote_jid NOT GLOB '[0-9]*@s.whatsapp.net'");
                                    sQLiteDatabase.execSQL("UPDATE message_base_key SET recipient_id = CAST(REPLACE(msg_key_remote_jid, '@s.whatsapp.net', '') AS INTEGER)");
                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, device_id)");
                                    sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_idx");
                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, recipient_type, device_id)");
                                    sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_idx");
                                    sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, recipient_type, device_id)");
                                    sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                                    sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, sender_type, device_id)");
                                    sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS decryption_journal (msg_key_id TEXT NOT NULL, sender_id TEXT NOT NULL, device_id TEXT NOT NULL, plain_text BLOB NOT NULL, receive_timestamp INTEGER NOT NULL)");
                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS decryption_journal_idx ON decryption_journal (msg_key_id, sender_id, device_id)");
                                    sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS\n            preacks (\n              _id INTEGER PRIMARY KEY AUTOINCREMENT,\n              ptn BLOB NOT NULL\n            )\n        ");
                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_lid_identifier_idx");
                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_lid_identifier_idx");
                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_lid_identifier_idx");
                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_lid_identifier_idx");
                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_lid_identifier_idx");
                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_protocol_idx");
                                    sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_id TEXT");
                                    sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_type INTEGER");
                                    sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sessions_account_idx ON sessions (recipient_account_id, recipient_account_type, device_id )");
                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_protocol_idx");
                                    sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_id TEXT");
                                    sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_type INTEGER");
                                    sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_account_idx ON sender_keys (group_id, sender_account_id, sender_account_type, device_id)");
                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v2 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type )");
                                    A01(sQLiteDatabase, "sessions_idx");
                                    sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN session_type INTEGER NOT NULL DEFAULT 0");
                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v22 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type, session_type )");
                                    A01(sQLiteDatabase, "sessions_idx_v2");
                                    sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                    sQLiteDatabase.execSQL("ALTER TABLE signed_prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                    sQLiteDatabase.execSQL("ALTER TABLE prekey_uploads ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx_v23 ON sender_keys (group_id, sender_id, sender_type, device_id, sender_account_id, sender_account_type)");
                                    A01(sQLiteDatabase, "sender_keys_idx");
                                    return;
                                }
                                sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN direct_distribution BOOLEAN");
                                ContentValues contentValues4 = new ContentValues();
                                contentValues4.put("direct_distribution", false);
                                sQLiteDatabase.update("prekeys", contentValues4, (String) null, (String[]) null);
                                sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN upload_timestamp INTEGER");
                                ContentValues contentValues22 = new ContentValues();
                                Long valueOf2 = Long.valueOf(A012);
                                contentValues22.put("upload_timestamp", valueOf2);
                                sQLiteDatabase.update("prekeys", contentValues22, "sent_to_server != 0", (String[]) null);
                                sQLiteDatabase.execSQL("CREATE TABLE prekey_uploads (_id INTEGER PRIMARY KEY AUTOINCREMENT, upload_timestamp INTEGER, key_type INTEGER NOT NULL DEFAULT 0)");
                                ContentValues contentValues32 = new ContentValues();
                                contentValues32.put("upload_timestamp", valueOf2);
                                sQLiteDatabase.insert("prekey_uploads", (String) null, contentValues32);
                                A03(sQLiteDatabase, "identities", "CREATE TABLE identities (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, registration_id INTEGER, public_key BLOB, private_key BLOB, next_prekey_id INTEGER, timestamp INTEGER)", new String[]{"recipient_id", "registration_id", "public_key", "private_key", "next_prekey_id", "timestamp"});
                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, device_id)");
                                A02(sQLiteDatabase, "identities");
                                A03(sQLiteDatabase, "sessions", "CREATE TABLE sessions (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, record BLOB, timestamp INTEGER)", new String[]{"recipient_id", "record", "timestamp"});
                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx ON sessions (recipient_id, device_id)");
                                sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                                A02(sQLiteDatabase, "sessions");
                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id, device_id)");
                                sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, device_id)");
                                sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_id INTEGER ");
                                sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                                sQLiteDatabase.execSQL("DELETE FROM message_base_key WHERE msg_key_remote_jid NOT GLOB '[0-9]*@s.whatsapp.net'");
                                sQLiteDatabase.execSQL("UPDATE message_base_key SET recipient_id = CAST(REPLACE(msg_key_remote_jid, '@s.whatsapp.net', '') AS INTEGER)");
                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, device_id)");
                                sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_idx");
                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, recipient_type, device_id)");
                                sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_idx");
                                sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, recipient_type, device_id)");
                                sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                                sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, sender_type, device_id)");
                                sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS decryption_journal (msg_key_id TEXT NOT NULL, sender_id TEXT NOT NULL, device_id TEXT NOT NULL, plain_text BLOB NOT NULL, receive_timestamp INTEGER NOT NULL)");
                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS decryption_journal_idx ON decryption_journal (msg_key_id, sender_id, device_id)");
                                sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS\n            preacks (\n              _id INTEGER PRIMARY KEY AUTOINCREMENT,\n              ptn BLOB NOT NULL\n            )\n        ");
                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_lid_identifier_idx");
                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_lid_identifier_idx");
                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_lid_identifier_idx");
                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_lid_identifier_idx");
                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_lid_identifier_idx");
                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_protocol_idx");
                                sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_id TEXT");
                                sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_type INTEGER");
                                sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sessions_account_idx ON sessions (recipient_account_id, recipient_account_type, device_id )");
                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_protocol_idx");
                                sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_id TEXT");
                                sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_type INTEGER");
                                sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_account_idx ON sender_keys (group_id, sender_account_id, sender_account_type, device_id)");
                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v2 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type )");
                                A01(sQLiteDatabase, "sessions_idx");
                                sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN session_type INTEGER NOT NULL DEFAULT 0");
                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v22 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type, session_type )");
                                A01(sQLiteDatabase, "sessions_idx_v2");
                                sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                sQLiteDatabase.execSQL("ALTER TABLE signed_prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                sQLiteDatabase.execSQL("ALTER TABLE prekey_uploads ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx_v23 ON sender_keys (group_id, sender_id, sender_type, device_id, sender_account_id, sender_account_type)");
                                A01(sQLiteDatabase, "sender_keys_idx");
                                return;
                            }
                            sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN timestamp INTEGER");
                            ContentValues contentValues5 = new ContentValues();
                            contentValues5.put("timestamp", Long.valueOf(A012));
                            sQLiteDatabase.update("sender_keys", contentValues5, (String) null, (String[]) null);
                            sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN direct_distribution BOOLEAN");
                            ContentValues contentValues42 = new ContentValues();
                            contentValues42.put("direct_distribution", false);
                            sQLiteDatabase.update("prekeys", contentValues42, (String) null, (String[]) null);
                            sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN upload_timestamp INTEGER");
                            ContentValues contentValues222 = new ContentValues();
                            Long valueOf22 = Long.valueOf(A012);
                            contentValues222.put("upload_timestamp", valueOf22);
                            sQLiteDatabase.update("prekeys", contentValues222, "sent_to_server != 0", (String[]) null);
                            sQLiteDatabase.execSQL("CREATE TABLE prekey_uploads (_id INTEGER PRIMARY KEY AUTOINCREMENT, upload_timestamp INTEGER, key_type INTEGER NOT NULL DEFAULT 0)");
                            ContentValues contentValues322 = new ContentValues();
                            contentValues322.put("upload_timestamp", valueOf22);
                            sQLiteDatabase.insert("prekey_uploads", (String) null, contentValues322);
                            A03(sQLiteDatabase, "identities", "CREATE TABLE identities (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, registration_id INTEGER, public_key BLOB, private_key BLOB, next_prekey_id INTEGER, timestamp INTEGER)", new String[]{"recipient_id", "registration_id", "public_key", "private_key", "next_prekey_id", "timestamp"});
                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, device_id)");
                            A02(sQLiteDatabase, "identities");
                            A03(sQLiteDatabase, "sessions", "CREATE TABLE sessions (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, record BLOB, timestamp INTEGER)", new String[]{"recipient_id", "record", "timestamp"});
                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx ON sessions (recipient_id, device_id)");
                            sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                            A02(sQLiteDatabase, "sessions");
                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id, device_id)");
                            sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, device_id)");
                            sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_id INTEGER ");
                            sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                            sQLiteDatabase.execSQL("DELETE FROM message_base_key WHERE msg_key_remote_jid NOT GLOB '[0-9]*@s.whatsapp.net'");
                            sQLiteDatabase.execSQL("UPDATE message_base_key SET recipient_id = CAST(REPLACE(msg_key_remote_jid, '@s.whatsapp.net', '') AS INTEGER)");
                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, device_id)");
                            sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_idx");
                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, recipient_type, device_id)");
                            sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_idx");
                            sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, recipient_type, device_id)");
                            sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                            sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, sender_type, device_id)");
                            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS decryption_journal (msg_key_id TEXT NOT NULL, sender_id TEXT NOT NULL, device_id TEXT NOT NULL, plain_text BLOB NOT NULL, receive_timestamp INTEGER NOT NULL)");
                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS decryption_journal_idx ON decryption_journal (msg_key_id, sender_id, device_id)");
                            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS\n            preacks (\n              _id INTEGER PRIMARY KEY AUTOINCREMENT,\n              ptn BLOB NOT NULL\n            )\n        ");
                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_lid_identifier_idx");
                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_lid_identifier_idx");
                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_lid_identifier_idx");
                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_lid_identifier_idx");
                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_lid_identifier_idx");
                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_protocol_idx");
                            sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_id TEXT");
                            sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_type INTEGER");
                            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sessions_account_idx ON sessions (recipient_account_id, recipient_account_type, device_id )");
                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_protocol_idx");
                            sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_id TEXT");
                            sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_type INTEGER");
                            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_account_idx ON sender_keys (group_id, sender_account_id, sender_account_type, device_id)");
                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v2 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type )");
                            A01(sQLiteDatabase, "sessions_idx");
                            sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN session_type INTEGER NOT NULL DEFAULT 0");
                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v22 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type, session_type )");
                            A01(sQLiteDatabase, "sessions_idx_v2");
                            sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                            sQLiteDatabase.execSQL("ALTER TABLE signed_prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                            sQLiteDatabase.execSQL("ALTER TABLE prekey_uploads ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx_v23 ON sender_keys (group_id, sender_id, sender_type, device_id, sender_account_id, sender_account_type)");
                            A01(sQLiteDatabase, "sender_keys_idx");
                            return;
                        }
                        C28331Zy.A01(sQLiteDatabase, "fast_ratchet_sender_keys");
                        sQLiteDatabase.execSQL("CREATE TABLE fast_ratchet_sender_keys (_id INTEGER PRIMARY KEY AUTOINCREMENT, group_id TEXT NOT NULL, sender_id INTEGER NOT NULL, record BLOB NOT NULL)");
                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id)");
                        sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN timestamp INTEGER");
                        ContentValues contentValues52 = new ContentValues();
                        contentValues52.put("timestamp", Long.valueOf(A012));
                        sQLiteDatabase.update("sender_keys", contentValues52, (String) null, (String[]) null);
                        sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN direct_distribution BOOLEAN");
                        ContentValues contentValues422 = new ContentValues();
                        contentValues422.put("direct_distribution", false);
                        sQLiteDatabase.update("prekeys", contentValues422, (String) null, (String[]) null);
                        sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN upload_timestamp INTEGER");
                        ContentValues contentValues2222 = new ContentValues();
                        Long valueOf222 = Long.valueOf(A012);
                        contentValues2222.put("upload_timestamp", valueOf222);
                        sQLiteDatabase.update("prekeys", contentValues2222, "sent_to_server != 0", (String[]) null);
                        sQLiteDatabase.execSQL("CREATE TABLE prekey_uploads (_id INTEGER PRIMARY KEY AUTOINCREMENT, upload_timestamp INTEGER, key_type INTEGER NOT NULL DEFAULT 0)");
                        ContentValues contentValues3222 = new ContentValues();
                        contentValues3222.put("upload_timestamp", valueOf222);
                        sQLiteDatabase.insert("prekey_uploads", (String) null, contentValues3222);
                        A03(sQLiteDatabase, "identities", "CREATE TABLE identities (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, registration_id INTEGER, public_key BLOB, private_key BLOB, next_prekey_id INTEGER, timestamp INTEGER)", new String[]{"recipient_id", "registration_id", "public_key", "private_key", "next_prekey_id", "timestamp"});
                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, device_id)");
                        A02(sQLiteDatabase, "identities");
                        A03(sQLiteDatabase, "sessions", "CREATE TABLE sessions (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, record BLOB, timestamp INTEGER)", new String[]{"recipient_id", "record", "timestamp"});
                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx ON sessions (recipient_id, device_id)");
                        sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                        A02(sQLiteDatabase, "sessions");
                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id, device_id)");
                        sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, device_id)");
                        sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_id INTEGER ");
                        sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                        sQLiteDatabase.execSQL("DELETE FROM message_base_key WHERE msg_key_remote_jid NOT GLOB '[0-9]*@s.whatsapp.net'");
                        sQLiteDatabase.execSQL("UPDATE message_base_key SET recipient_id = CAST(REPLACE(msg_key_remote_jid, '@s.whatsapp.net', '') AS INTEGER)");
                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, device_id)");
                        sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_idx");
                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, recipient_type, device_id)");
                        sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_idx");
                        sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, recipient_type, device_id)");
                        sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                        sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, sender_type, device_id)");
                        sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS decryption_journal (msg_key_id TEXT NOT NULL, sender_id TEXT NOT NULL, device_id TEXT NOT NULL, plain_text BLOB NOT NULL, receive_timestamp INTEGER NOT NULL)");
                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS decryption_journal_idx ON decryption_journal (msg_key_id, sender_id, device_id)");
                        sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS\n            preacks (\n              _id INTEGER PRIMARY KEY AUTOINCREMENT,\n              ptn BLOB NOT NULL\n            )\n        ");
                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_lid_identifier_idx");
                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_lid_identifier_idx");
                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_lid_identifier_idx");
                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_lid_identifier_idx");
                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_lid_identifier_idx");
                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_protocol_idx");
                        sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_id TEXT");
                        sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_type INTEGER");
                        sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sessions_account_idx ON sessions (recipient_account_id, recipient_account_type, device_id )");
                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_protocol_idx");
                        sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_id TEXT");
                        sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_type INTEGER");
                        sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_account_idx ON sender_keys (group_id, sender_account_id, sender_account_type, device_id)");
                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v2 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type )");
                        A01(sQLiteDatabase, "sessions_idx");
                        sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN session_type INTEGER NOT NULL DEFAULT 0");
                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v22 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type, session_type )");
                        A01(sQLiteDatabase, "sessions_idx_v2");
                        sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                        sQLiteDatabase.execSQL("ALTER TABLE signed_prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                        sQLiteDatabase.execSQL("ALTER TABLE prekey_uploads ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx_v23 ON sender_keys (group_id, sender_id, sender_type, device_id, sender_account_id, sender_account_type)");
                        A01(sQLiteDatabase, "sender_keys_idx");
                        return;
                    }
                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id)");
                    C28331Zy.A01(sQLiteDatabase, "fast_ratchet_sender_keys");
                    sQLiteDatabase.execSQL("CREATE TABLE fast_ratchet_sender_keys (_id INTEGER PRIMARY KEY AUTOINCREMENT, group_id TEXT NOT NULL, sender_id INTEGER NOT NULL, record BLOB NOT NULL)");
                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id)");
                    sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN timestamp INTEGER");
                    ContentValues contentValues522 = new ContentValues();
                    contentValues522.put("timestamp", Long.valueOf(A012));
                    sQLiteDatabase.update("sender_keys", contentValues522, (String) null, (String[]) null);
                    sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN direct_distribution BOOLEAN");
                    ContentValues contentValues4222 = new ContentValues();
                    contentValues4222.put("direct_distribution", false);
                    sQLiteDatabase.update("prekeys", contentValues4222, (String) null, (String[]) null);
                    sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN upload_timestamp INTEGER");
                    ContentValues contentValues22222 = new ContentValues();
                    Long valueOf2222 = Long.valueOf(A012);
                    contentValues22222.put("upload_timestamp", valueOf2222);
                    sQLiteDatabase.update("prekeys", contentValues22222, "sent_to_server != 0", (String[]) null);
                    sQLiteDatabase.execSQL("CREATE TABLE prekey_uploads (_id INTEGER PRIMARY KEY AUTOINCREMENT, upload_timestamp INTEGER, key_type INTEGER NOT NULL DEFAULT 0)");
                    ContentValues contentValues32222 = new ContentValues();
                    contentValues32222.put("upload_timestamp", valueOf2222);
                    sQLiteDatabase.insert("prekey_uploads", (String) null, contentValues32222);
                    A03(sQLiteDatabase, "identities", "CREATE TABLE identities (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, registration_id INTEGER, public_key BLOB, private_key BLOB, next_prekey_id INTEGER, timestamp INTEGER)", new String[]{"recipient_id", "registration_id", "public_key", "private_key", "next_prekey_id", "timestamp"});
                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, device_id)");
                    A02(sQLiteDatabase, "identities");
                    A03(sQLiteDatabase, "sessions", "CREATE TABLE sessions (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, record BLOB, timestamp INTEGER)", new String[]{"recipient_id", "record", "timestamp"});
                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx ON sessions (recipient_id, device_id)");
                    sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                    A02(sQLiteDatabase, "sessions");
                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id, device_id)");
                    sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, device_id)");
                    sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_id INTEGER ");
                    sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                    sQLiteDatabase.execSQL("DELETE FROM message_base_key WHERE msg_key_remote_jid NOT GLOB '[0-9]*@s.whatsapp.net'");
                    sQLiteDatabase.execSQL("UPDATE message_base_key SET recipient_id = CAST(REPLACE(msg_key_remote_jid, '@s.whatsapp.net', '') AS INTEGER)");
                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, device_id)");
                    sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_idx");
                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, recipient_type, device_id)");
                    sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_idx");
                    sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, recipient_type, device_id)");
                    sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                    sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, sender_type, device_id)");
                    sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS decryption_journal (msg_key_id TEXT NOT NULL, sender_id TEXT NOT NULL, device_id TEXT NOT NULL, plain_text BLOB NOT NULL, receive_timestamp INTEGER NOT NULL)");
                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS decryption_journal_idx ON decryption_journal (msg_key_id, sender_id, device_id)");
                    sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS\n            preacks (\n              _id INTEGER PRIMARY KEY AUTOINCREMENT,\n              ptn BLOB NOT NULL\n            )\n        ");
                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_lid_identifier_idx");
                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_lid_identifier_idx");
                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_lid_identifier_idx");
                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_lid_identifier_idx");
                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_lid_identifier_idx");
                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_protocol_idx");
                    sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_id TEXT");
                    sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_type INTEGER");
                    sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sessions_account_idx ON sessions (recipient_account_id, recipient_account_type, device_id )");
                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_protocol_idx");
                    sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_id TEXT");
                    sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_type INTEGER");
                    sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_account_idx ON sender_keys (group_id, sender_account_id, sender_account_type, device_id)");
                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v2 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type )");
                    A01(sQLiteDatabase, "sessions_idx");
                    sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN session_type INTEGER NOT NULL DEFAULT 0");
                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v22 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type, session_type )");
                    A01(sQLiteDatabase, "sessions_idx_v2");
                    sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                    sQLiteDatabase.execSQL("ALTER TABLE signed_prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                    sQLiteDatabase.execSQL("ALTER TABLE prekey_uploads ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx_v23 ON sender_keys (group_id, sender_id, sender_type, device_id, sender_account_id, sender_account_type)");
                    A01(sQLiteDatabase, "sender_keys_idx");
                    return;
                }
                C28331Zy.A01(sQLiteDatabase, "sender_keys");
                sQLiteDatabase.execSQL("CREATE TABLE sender_keys (_id INTEGER PRIMARY KEY AUTOINCREMENT, group_id TEXT NOT NULL, sender_id INTEGER NOT NULL, record BLOB NOT NULL)");
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id)");
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id)");
                C28331Zy.A01(sQLiteDatabase, "fast_ratchet_sender_keys");
                sQLiteDatabase.execSQL("CREATE TABLE fast_ratchet_sender_keys (_id INTEGER PRIMARY KEY AUTOINCREMENT, group_id TEXT NOT NULL, sender_id INTEGER NOT NULL, record BLOB NOT NULL)");
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id)");
                sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN timestamp INTEGER");
                ContentValues contentValues5222 = new ContentValues();
                contentValues5222.put("timestamp", Long.valueOf(A012));
                sQLiteDatabase.update("sender_keys", contentValues5222, (String) null, (String[]) null);
                sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN direct_distribution BOOLEAN");
                ContentValues contentValues42222 = new ContentValues();
                contentValues42222.put("direct_distribution", false);
                sQLiteDatabase.update("prekeys", contentValues42222, (String) null, (String[]) null);
                sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN upload_timestamp INTEGER");
                ContentValues contentValues222222 = new ContentValues();
                Long valueOf22222 = Long.valueOf(A012);
                contentValues222222.put("upload_timestamp", valueOf22222);
                sQLiteDatabase.update("prekeys", contentValues222222, "sent_to_server != 0", (String[]) null);
                sQLiteDatabase.execSQL("CREATE TABLE prekey_uploads (_id INTEGER PRIMARY KEY AUTOINCREMENT, upload_timestamp INTEGER, key_type INTEGER NOT NULL DEFAULT 0)");
                ContentValues contentValues322222 = new ContentValues();
                contentValues322222.put("upload_timestamp", valueOf22222);
                sQLiteDatabase.insert("prekey_uploads", (String) null, contentValues322222);
                A03(sQLiteDatabase, "identities", "CREATE TABLE identities (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, registration_id INTEGER, public_key BLOB, private_key BLOB, next_prekey_id INTEGER, timestamp INTEGER)", new String[]{"recipient_id", "registration_id", "public_key", "private_key", "next_prekey_id", "timestamp"});
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, device_id)");
                A02(sQLiteDatabase, "identities");
                A03(sQLiteDatabase, "sessions", "CREATE TABLE sessions (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, record BLOB, timestamp INTEGER)", new String[]{"recipient_id", "record", "timestamp"});
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx ON sessions (recipient_id, device_id)");
                sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                A02(sQLiteDatabase, "sessions");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id, device_id)");
                sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, device_id)");
                sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_id INTEGER ");
                sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                sQLiteDatabase.execSQL("DELETE FROM message_base_key WHERE msg_key_remote_jid NOT GLOB '[0-9]*@s.whatsapp.net'");
                sQLiteDatabase.execSQL("UPDATE message_base_key SET recipient_id = CAST(REPLACE(msg_key_remote_jid, '@s.whatsapp.net', '') AS INTEGER)");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, device_id)");
                sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_idx");
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, recipient_type, device_id)");
                sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_idx");
                sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, recipient_type, device_id)");
                sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, sender_type, device_id)");
                sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS decryption_journal (msg_key_id TEXT NOT NULL, sender_id TEXT NOT NULL, device_id TEXT NOT NULL, plain_text BLOB NOT NULL, receive_timestamp INTEGER NOT NULL)");
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS decryption_journal_idx ON decryption_journal (msg_key_id, sender_id, device_id)");
                sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS\n            preacks (\n              _id INTEGER PRIMARY KEY AUTOINCREMENT,\n              ptn BLOB NOT NULL\n            )\n        ");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_lid_identifier_idx");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_lid_identifier_idx");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_lid_identifier_idx");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_lid_identifier_idx");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_lid_identifier_idx");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_protocol_idx");
                sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_id TEXT");
                sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_type INTEGER");
                sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sessions_account_idx ON sessions (recipient_account_id, recipient_account_type, device_id )");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_protocol_idx");
                sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_id TEXT");
                sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_type INTEGER");
                sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_account_idx ON sender_keys (group_id, sender_account_id, sender_account_type, device_id)");
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v2 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type )");
                A01(sQLiteDatabase, "sessions_idx");
                sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN session_type INTEGER NOT NULL DEFAULT 0");
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v22 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type, session_type )");
                A01(sQLiteDatabase, "sessions_idx_v2");
                sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                sQLiteDatabase.execSQL("ALTER TABLE signed_prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                sQLiteDatabase.execSQL("ALTER TABLE prekey_uploads ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx_v23 ON sender_keys (group_id, sender_id, sender_type, device_id, sender_account_id, sender_account_type)");
                A01(sQLiteDatabase, "sender_keys_idx");
                return;
            }
            sQLiteDatabase.execSQL("CREATE TABLE message_base_key (_id INTEGER PRIMARY KEY AUTOINCREMENT, msg_key_remote_jid TEXT NOT NULL, msg_key_from_me BOOLEAN NOT NULL, msg_key_id TEXT NOT NULL, last_alice_base_key BLOB NOT NULL, timestamp INTEGER)");
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id)");
            C28331Zy.A01(sQLiteDatabase, "sender_keys");
            sQLiteDatabase.execSQL("CREATE TABLE sender_keys (_id INTEGER PRIMARY KEY AUTOINCREMENT, group_id TEXT NOT NULL, sender_id INTEGER NOT NULL, record BLOB NOT NULL)");
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id)");
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id)");
            C28331Zy.A01(sQLiteDatabase, "fast_ratchet_sender_keys");
            sQLiteDatabase.execSQL("CREATE TABLE fast_ratchet_sender_keys (_id INTEGER PRIMARY KEY AUTOINCREMENT, group_id TEXT NOT NULL, sender_id INTEGER NOT NULL, record BLOB NOT NULL)");
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id)");
            sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN timestamp INTEGER");
            ContentValues contentValues52222 = new ContentValues();
            contentValues52222.put("timestamp", Long.valueOf(A012));
            sQLiteDatabase.update("sender_keys", contentValues52222, (String) null, (String[]) null);
            sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN direct_distribution BOOLEAN");
            ContentValues contentValues422222 = new ContentValues();
            contentValues422222.put("direct_distribution", false);
            sQLiteDatabase.update("prekeys", contentValues422222, (String) null, (String[]) null);
            sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN upload_timestamp INTEGER");
            ContentValues contentValues2222222 = new ContentValues();
            Long valueOf222222 = Long.valueOf(A012);
            contentValues2222222.put("upload_timestamp", valueOf222222);
            sQLiteDatabase.update("prekeys", contentValues2222222, "sent_to_server != 0", (String[]) null);
            sQLiteDatabase.execSQL("CREATE TABLE prekey_uploads (_id INTEGER PRIMARY KEY AUTOINCREMENT, upload_timestamp INTEGER, key_type INTEGER NOT NULL DEFAULT 0)");
            ContentValues contentValues3222222 = new ContentValues();
            contentValues3222222.put("upload_timestamp", valueOf222222);
            sQLiteDatabase.insert("prekey_uploads", (String) null, contentValues3222222);
            A03(sQLiteDatabase, "identities", "CREATE TABLE identities (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, registration_id INTEGER, public_key BLOB, private_key BLOB, next_prekey_id INTEGER, timestamp INTEGER)", new String[]{"recipient_id", "registration_id", "public_key", "private_key", "next_prekey_id", "timestamp"});
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, device_id)");
            A02(sQLiteDatabase, "identities");
            A03(sQLiteDatabase, "sessions", "CREATE TABLE sessions (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, record BLOB, timestamp INTEGER)", new String[]{"recipient_id", "record", "timestamp"});
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx ON sessions (recipient_id, device_id)");
            sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
            A02(sQLiteDatabase, "sessions");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id, device_id)");
            sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, device_id)");
            sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_id INTEGER ");
            sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
            sQLiteDatabase.execSQL("DELETE FROM message_base_key WHERE msg_key_remote_jid NOT GLOB '[0-9]*@s.whatsapp.net'");
            sQLiteDatabase.execSQL("UPDATE message_base_key SET recipient_id = CAST(REPLACE(msg_key_remote_jid, '@s.whatsapp.net', '') AS INTEGER)");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, device_id)");
            sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_idx");
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, recipient_type, device_id)");
            sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_idx");
            sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, recipient_type, device_id)");
            sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
            sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, sender_type, device_id)");
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS decryption_journal (msg_key_id TEXT NOT NULL, sender_id TEXT NOT NULL, device_id TEXT NOT NULL, plain_text BLOB NOT NULL, receive_timestamp INTEGER NOT NULL)");
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS decryption_journal_idx ON decryption_journal (msg_key_id, sender_id, device_id)");
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS\n            preacks (\n              _id INTEGER PRIMARY KEY AUTOINCREMENT,\n              ptn BLOB NOT NULL\n            )\n        ");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_lid_identifier_idx");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_lid_identifier_idx");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_lid_identifier_idx");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_lid_identifier_idx");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_lid_identifier_idx");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_protocol_idx");
            sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_id TEXT");
            sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_account_type INTEGER");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sessions_account_idx ON sessions (recipient_account_id, recipient_account_type, device_id )");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_protocol_idx");
            sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_id TEXT");
            sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_account_type INTEGER");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_account_idx ON sender_keys (group_id, sender_account_id, sender_account_type, device_id)");
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v2 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type )");
            A01(sQLiteDatabase, "sessions_idx");
            sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN session_type INTEGER NOT NULL DEFAULT 0");
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx_v22 ON sessions (recipient_id, recipient_type, device_id, recipient_account_id, recipient_account_type, session_type )");
            A01(sQLiteDatabase, "sessions_idx_v2");
            sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
            sQLiteDatabase.execSQL("ALTER TABLE signed_prekeys ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
            sQLiteDatabase.execSQL("ALTER TABLE prekey_uploads ADD COLUMN key_type INTEGER NOT NULL DEFAULT 0");
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx_v23 ON sender_keys (group_id, sender_id, sender_type, device_id, sender_account_id, sender_account_type)");
            A01(sQLiteDatabase, "sender_keys_idx");
            return;
        }
        StringBuilder sb2 = new StringBuilder();
        sb2.append("Unknown upgrade destination version: ");
        sb2.append(i);
        sb2.append(" -> ");
        sb2.append(i2);
        throw new SQLiteException(sb2.toString());
    }

    public static void A01(SQLiteDatabase sQLiteDatabase, String str) {
        StringBuilder sb = new StringBuilder();
        sb.append("SharedDBQueryExecutor/dropIndexWithSQLiteDatabase/attempting to drop index: ");
        sb.append(str);
        Log.i(sb.toString());
        StringBuilder sb2 = new StringBuilder();
        sb2.append("DROP INDEX IF EXISTS ");
        sb2.append(str);
        sQLiteDatabase.execSQL(sb2.toString());
    }

    public static final void A02(SQLiteDatabase sQLiteDatabase, String str) {
        StringBuilder sb = new StringBuilder();
        sb.append("UPDATE ");
        sb.append(str);
        sb.append(" SET ");
        sb.append("device_id");
        sb.append(" = 0");
        sQLiteDatabase.execSQL(sb.toString());
    }

    public static final void A03(SQLiteDatabase sQLiteDatabase, String str, String str2, String[] strArr) {
        StringBuilder sb = new StringBuilder();
        sb.append("ALTER TABLE ");
        sb.append(str);
        sb.append(" RENAME TO old_");
        sb.append(str);
        sb.append(';');
        sQLiteDatabase.execSQL(sb.toString());
        sQLiteDatabase.execSQL(str2);
        String A0I = C200410p.A0I(",", "", "", strArr);
        StringBuilder sb2 = new StringBuilder();
        sb2.append("INSERT INTO ");
        sb2.append(str);
        sb2.append(" (");
        sb2.append(A0I);
        sb2.append(") SELECT ");
        sb2.append(A0I);
        sb2.append(" FROM old_");
        sb2.append(str);
        sQLiteDatabase.execSQL(sb2.toString());
        StringBuilder sb3 = new StringBuilder();
        sb3.append("old_");
        sb3.append(str);
        C28331Zy.A01(sQLiteDatabase, sb3.toString());
    }

    public C23141Ev A09() {
        try {
            String databaseName = getDatabaseName();
            return AnonymousClass1Eu.A03(super.A04(), (AnonymousClass1CP) this.A03.get(), this.A02, databaseName);
        } catch (SQLiteException e) {
            Log.e("AxolotlDbHelper/initDatabase failed, retrying one more time", e);
            this.A06.A0E("AxolotlDbHelper/initDatabase", "failed", e);
            AnonymousClass1PE r1 = this.A00;
            if (r1 != null) {
                Log.i("SignalCoordinator/onDatabaseCorrupted, deleting the DB");
                r1.A00.A0O();
            }
            String databaseName2 = getDatabaseName();
            return AnonymousClass1Eu.A03(super.A04(), (AnonymousClass1CP) this.A03.get(), this.A02, databaseName2);
        }
    }
}
